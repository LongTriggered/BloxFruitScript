if not game:IsLoaded() then
    game.Loaded:Wait()
end

local default_config
if not _G.Setting then
    default_config = true
    _G.Setting    = {
        Enabled             = true,
        WeaponToAttack      = "Melee", -- "Sword", "Melee", "FruitM1"
        SkipUnder1mFruit    = false,
        SkipFullFruit       = false,
        RandomFruit         = true,
        InstantTp           = true,
        WhiteScreen         = false,
        Team                = "Marines",
        HopServer           = { ["Enable"] = false  , ["Wait Time"]     = 60    },
        Webhook             = { ["Enable"] = true   , ["WebhookLink"]   = ""    }
    }
else
    default_config = false
end
---------------- variables
local workspace         = game:GetService('Workspace')
local PlayerService     = game:GetService('Players')
local replicatedstorage = game:GetService("ReplicatedStorage")
local TeleportService   = game:GetService("TeleportService")
local HttpService       = game:GetService("HttpService")
local RunService        = game:GetService("RunService")
local Player            = PlayerService.LocalPlayer
local farming = false

local fruit_ids = {
    ["Rocket Fruit"] = "rbxassetid://15060012861",
    ["Spin Fruit"] = "rbxassetid://15057683975",
    ["Blade Fruit"] = "rbxassetid://15104782377",
    ["Spring Fruit"] = "rbxassetid://15105281957",
    ["Bomb Fruit"] = "rbxassetid://15116740364",
    ["Smoke Fruit"] = "rbxassetid://15116696973",
    ["Spike Fruit"] = "rbxassetid://15107005807",
    ["Flame Fruit"] = "rbxassetid://15111584216",
    ["Falcon Fruit"] = "rbxassetid://15112469964",
    ["Ice Fruit"] = "rbxassetid://15100433167",
    ["Sand Fruit"] = "rbxassetid://15111517529",
    ["Dark Fruit"] = "rbxassetid://15111553409",
    ["Diamond Fruit"] = "rbxassetid://15112600534",
    ["Light Fruit"] = "rbxassetid://15100283484",
    ["Rubber Fruit"] = "rbxassetid://15104817760",
    ["Barrier Fruit"] = "rbxassetid://15100485671",
    ["Ghost Fruit"] = "rbxassetid://15112333093",
    ["Magma Fruit"] = "rbxassetid://15105350415",
    ["Quake Fruit"] = "rbxassetid://15057718441",
    ["Buddha Fruit"] = "rbxassetid://15100313696",
    ["Love Fruit"] = "rbxassetid://15116730102",
    ["Spider Fruit"] = "rbxassetid://15116967784",
    ["Sound Fruit"] = "rbxassetid://14661873358",
    ["Phoenix Fruit"] = "rbxassetid://15100246632",
    ["Portal Fruit"] = "rbxassetid://15112215862",
    ["Rumble Fruit"] = "rbxassetid://15116747420",
    ["Pain Fruit"] = "rbxassetid://15116721173",
    ["Blizzard Fruit"] = "rbxassetid://15100384816",
    ["Gravity Fruit"] = "rbxassetid://15100299740",
    ["T-Rex Fruit"] = "rbxassetid://15708895165",
    ["Mammoth Fruit"] = "rbxassetid://14661837634",
    ["Dough Fruit"] = "rbxassetid://15100273645",
    ["Shadow Fruit"] = "rbxassetid://15112263502",
    ["Venom Fruit"] = "https://assetdelivery.roblox.com/v1/asset/?id=10395893751", -- Special deo biet tai sao
    ["Control Fruit"] = "rbxassetid://15100184583",
    ["Gas Fruit"] = "",
    ["Spirit Fruit"] = "",
    ["Leopard Fruit"] = "rbxassetid://15106768588",
    ["Yeti Fruit"] = "",
    ["Kitsune Fruit"] = "rbxassetid://15482881956",
    ["Dragon Fruit"] = "rbxassetid://115237822212661"
}
local fruitType = { --Done
    LoadedFruit = false,
    Factory = false, -- Done
    PirateRaid = false,
    Natural = false, -- Done
 --   DroppedFruit = false, -- Done--Done -- Done
 --   SeaEvent = false,
 --   Others = false,
    Random = false,
}

if Player.Team == nil then
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetTeam", tostring(_G.Setting.Team)) 
    print('remote join team called')
end

repeat task.wait() until game:GetService('Players').LocalPlayer.Team ~= nil
repeat task.wait() until game:GetService('Players').LocalPlayer.Character

local FruitCap          = Player.Data.FruitCap.Value
local backpack          = Player.Backpack
local Sea = 0
if game.PlaceId == 2753915549 then
    Sea = 1
elseif game.PlaceId == 4442272183 then
    Sea = 2
elseif game.PlaceId == 7449423635 then
	Sea = 3
end


function create_tag(instance, Name, Value)
    instance:SetAttribute(Name,Value)
end

function reword_fruit(Name)
    local Word = Name:split(" ")[1]
	return `{Word}-{Word}`
end

function delayTask(taskname)
    spawn(function()
    fruitType[taskname] = true
    print('delayed '..taskname)
    end)
    task.wait(1.7)
    print('finish delayed '.. taskname)
    fruitType[taskname] = false
end

function character()
    return Player.Character or Player.CharacterAdded:Wait()
end

function get_inventory()
    return replicatedstorage.Remotes.CommF_:InvokeServer("getInventory")
end

local notify_module = require(game:GetService("ReplicatedStorage").Notification)
function ingame_notify(msg)
    notify_module.new("<Color=Yellow>"..msg.."<Color=/>"):Display()
end

function skip_fruit(FruitName) -- 0 = common, 1 = uncommon, 2 = rare, 3 = legendary, 4 = mythical 
    if _G.Setting.SkipFullFruit or _G.Setting.SkipUnder1mFruit then
        for _,v in pairs(get_inventory()) do
            if v.Type == "Blox Fruit" then
                if v.Name == reword_fruit(FruitName) then -- vd: Doi "Spider Fruit" -> "Spider-Spider"
                    
                    if _G.Setting.SkipFullFruit then
                        if v.Count >= FruitCap then
                            print('Skipped '..FruitName.." due to full storage")
                            return true
                        end
                    end
                    if _G.Setting.SkipUnder1mFruit then
                        if v.Rarity < 3 then
                            print('Skipped '..FruitName.." due to lower than 1m")
                            return true
                        end
                    end
                end
            end
        end
    end
    return false
end

function updateNaturalFruitNames()
    for i,v in pairs(workspace:GetChildren()) do
        if v:FindFirstChild('Fruit') and not v:FindFirstChild('EatRemote') then -- fruit tu nhien
            local found_fruit_name = false
            for fruitname, fruitid in pairs(fruit_ids) do --- quet fruitlist
                if v.Fruit:FindFirstChild('Fruit') or v.Fruit:FindFirstChild('Idle') then
                    pcall(function()
                        if v.Fruit.Fruit.MeshId == fruitid or v.Fruit.Idle.AnimationId == fruitid then
                            found_fruit_name = true
                            v.Name = tostring(fruitname)
                        end
                    end)
                end
            end
            if not found_fruit_name then
                v.Name = "Unknow Fruit"
            end
        end
    end
end

function random_fruit()
    task.spawn(function()
        task.wait(4)
        if _G.Setting.RandomFruit then
            replicatedstorage.Remotes.CommF_:InvokeServer("Cousin","Buy")
        end
        while task.wait(10) do
            if _G.Setting.RandomFruit and _G.Setting.Enabled and not farming then
                for _, v in pairs(fruitType) do
                    if v == true then
                        repeat task.wait() until v == false
                    end
                end
                replicatedstorage.Remotes.CommF_:InvokeServer("Cousin","Buy")
                delayTask("Random")
            end
        end
    end)
end

function fire_handle(instance)
    local distance = (instance.Position - character().HumanoidRootPart.Position).Magnitude
    if distance >= 12 then
        return
    end
    firetouchinterest( character().HumanoidRootPart ,instance, 0) -- start
    task.wait()
    firetouchinterest( character().HumanoidRootPart ,instance, 1) -- end
end

function disable_seat()
    if character() and character():FindFirstChild('Humanoid') and character().Humanoid.Health > 0 then
    character():FindFirstChild('Humanoid').Sit = false
    end
end

function anti_afk()
    Player.Idled:connect(function() -- Anti Afk
        game:GetService("VirtualUser"):CaptureController()
        game:GetService("VirtualUser"):Button1Down(Vector2.new(0, 0))
        wait(1)
        game:GetService("VirtualUser"):Button1Up(Vector2.new(0, 0))
    end)
end

function create_force()
    if not character().HumanoidRootPart:FindFirstChild("BodyClip") then
        local Force    = Instance.new("BodyVelocity")
        Force.Name     = "BodyClip"
        Force.Parent   = character().HumanoidRootPart
        Force.MaxForce = Vector3.new(100000,100000,100000)
        Force.Velocity = Vector3.new(0,0,0)
    end
end
    
function remove_force()
    if  character().HumanoidRootPart:FindFirstChild("BodyClip") then
        character().HumanoidRootPart:FindFirstChild("BodyClip"):Destroy()
    end
end

local tweening
function tp(targetCFrame, InstantTp)
    if not character():FindFirstChild('Humanoid') or character().Humanoid.Health <= 0 then
        return
    end

    if tweening then
        tweening:Cancel()
    end

    if InstantTp and InstantTp == true then
            if tweening then
                tweening:Cancel()
                task.wait(1)
            end
            character().HumanoidRootPart.CFrame = targetCFrame
        return
    end

    local targetPosition = targetCFrame.Position
    local playerPosition = character().HumanoidRootPart.Position
    -- local direction = (targetPosition - playerPosition).Unit
    local distance = (targetPosition - playerPosition).Magnitude
    local tp_speed = 200
        if distance <= 45 then
            tp_speed = 10000
        elseif distance < 50 then
            tp_speed = 2000
        elseif distance < 150 then
            tp_speed = 800
        elseif distance < 250 then
            tp_speed = 600
        elseif distance < 500 then
            tp_speed = 400
        elseif distance < 750 then
            tp_speed = 250
        elseif distance >= 1000 then
            tp_speed = 200
        end
        create_force()
        tweening =  game:GetService("TweenService"):Create(
                    character().HumanoidRootPart,
                    TweenInfo.new(distance/tp_speed, Enum.EasingStyle.Linear),
                    {CFrame = targetCFrame})

        tweening:Play()
    -- tween.Completed:Wait()
    -- remove_force()
end

function stop_tween()
    if tweening then
        tweening:Cancel()
        remove_force()
    end
end    

function check_tp()
    task.spawn(function()
        local LastPos = character().HumanoidRootPart.Position
        while task.wait() do
            if tweening then
                if (LastPos-character().HumanoidRootPart.Position).Magnitude > 350 then
                    stop_tween()
                    task.wait(0.5)
                end
               LastPos = character().HumanoidRootPart.Position
            end
        end
    end)
end

function noclip()
    RunService.Stepped:Connect(function()
        if _G.Setting.Enabled then
            for _, Item in pairs(character():GetDescendants()) do
                if Item:IsA("BasePart") then
                    Item.CanCollide = false
                end
            end
        end
    end)
end

-- function table_remove(tbl, pos)
--     local value = tbl[pos]
--     for i = pos, #tbl - 1 do
--         tbl[i] = tbl[i + 1]
--     end
--     tbl[#tbl] = nil
--     return value
-- end

function createTag(instance, Name, Value)
    instance:SetAttribute(Name, Value)
  end

function fileCreate(filename,table)
    writefile(Player.Name.. "_" ..filename.. ".json", game:GetService('HttpService'):JSONEncode(table))
end

function sendJson(filename,data)
    fileCreate(filename,data)
    local fileData = readfile(Player.Name.. "_" ..filename.. ".json")
    -- URL avatar
    local AvatarUrl = "https://i.imgur.com/OBqZkBq.png" -- Thay bằng URL avatar của bạn

    -- Tạo nội dung body của yêu cầu với multipart/form-data
    local boundary = "------------------------" .. game:GetService("HttpService"):GenerateGUID(false)
    local body = "--" .. boundary .. "\r\n"
        .. "Content-Disposition: form-data; name=\"file\"; filename=\"" .. Player.Name.. "_" ..filename.. ".json" .. "\"\r\n"
        .. "Content-Type: application/json\r\n\r\n"
        .. fileData .. "\r\n"
        .. "--" .. boundary .. "\r\n"
        .. "Content-Disposition: form-data; name=\"avatar_url\"\r\n\r\n"
        .. AvatarUrl .. "\r\n"
        .. "--" .. boundary .. "--"

    -- Định nghĩa headers
    local headers = {
        ["Content-Type"] = "multipart/form-data; boundary=" .. boundary,
        ["Content-Length"] = tostring(#body),
    }

    -- Gửi yêu cầu HTTP
    local requestFunction = http_request or request or HttpPost
    if requestFunction then
        local response = requestFunction({
            Url = _G.Setting.Webhook.WebhookLink or DiscordWebhookUrl or "",
            Method = "POST",
            Headers = headers,
            Body = body,
        })

        -- Hiển thị phản hồi để kiểm tra lỗi hoặc thành công
        if response then
            if tonumber(response.StatusCode) < 400 then
            print("Trạng thái: Successfully Excuted")
            game:GetService'StarterGui':SetCore("SendNotification", {
                Title = "Shin dep trai", -- Notification title
                Text = "Sent Data Successfully", -- Notification text
                Icon = "https://i.imgur.com/LOkRYqi.png", -- Notification icon (optional)
                Duration = 5, -- Duration of the notification (optional, may be overridden if more than 3 notifs appear)
                })
            else
            print("Trạng thái: Webhook failed")
            end
        else
            print("Không nhận được phản hồi từ máy chủ.")
        end
    else
        print("Không tìm thấy hàm gửi HTTP!")
    end
end

function store_fruit(FruitName)
    pcall(function()
            task.wait(1.5)
            if FruitName:FindFirstChild('EatRemote') then
                print("storing "..FruitName.Name)
                replicatedstorage.Remotes.CommF_:InvokeServer("StoreFruit", reword_fruit(FruitName.Name), FruitName)
            end
        end)
end

function new_fruit_added(container)
    container.ChildAdded:Connect(function(child)
        if _G.Setting.Webhook.Enable then
            checkFruitOrigin(child)
        end
        store_fruit(child)
    end)
end

function enable_buso()
    if not character():FindFirstChild('HasBuso') then
        replicatedstorage.Remotes.CommF_:InvokeServer("Buso")
    end
end

function set_property()
    sethiddenproperty(Player,"SimulationRadius",math.huge)
end

local currentEquippedWeapon = nil
function equip_tool()
    for i,v in pairs(backpack:GetChildren()) do
        if v:IsA("Tool") then
            if (v.ToolTip == _G.Setting.WeaponToAttack) or (_G.Setting.WeaponToAttack == "FruitM1" and v.ToolTip == "Blox Fruit") then
                character():FindFirstChild('Humanoid'):EquipTool(v)
                currentEquippedWeapon = v
                return
            end
        end
    end
end

local combat_module = require(replicatedstorage.Modules.Net)
local register_attack = replicatedstorage.Modules.Net:WaitForChild("RE/RegisterAttack")
local register_hit = combat_module:RemoteEvent("RegisterHit")

function hit(hitPart)
    local playerPosition = character().HumanoidRootPart.Position
    if (playerPosition-hitPart.Position).Magnitude <= 60 then
        if _G.Setting.WeaponToAttack == "FruitM1" and currentEquippedWeapon then
                currentEquippedWeapon:FindFirstChild('LeftClickRemote'):FireServer(character().HumanoidRootPart.CFrame.LookVector, 2)
        else
            register_attack:FireServer(1e-9)
            register_hit:FireServer(hitPart, {})           
        end
    end
end

local is_hopping = false
local hop_counting_time = "Getting hopserver data"
function hop()
    if not _G.Setting.HopServer["Enable"] or is_hopping then
        return
    end

    local function serverhop_function()
        local servers = {}
        local req = http_request({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true", game.PlaceId)})
        local body = game:GetService('HttpService'):JSONDecode(req.Body)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= game.JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        while #servers > 0 and task.wait(1) do
            game:GetService('TeleportService'):TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game.Players.LocalPlayer)
        end
    end

    is_hopping = true
    task.spawn(function()
        for i = _G.Setting.HopServer["Wait Time"] , 0, -1 do
            hop_counting_time = "Waiting to hop server..."..tostring(i).."s"
            task.wait(1)
        end

        if farming == true or not _G.Setting.HopServer["Enable"] then
            is_hopping = false
            status_label:Refresh("Hopping cancelled")
            return
        end
        hop_counting_time = "Hopping"
        serverhop_function()
    end)
end

function start_main_farm()
    task.spawn(function()
        while task.wait() do
           if _G.Setting.Enabled then
                for i,v in pairs(workspace:GetChildren()) do
                    
                    if v:FindFirstChild('Handle') and v:FindFirstChild("Fruit") then
                        if skip_fruit(v.Name) then
                            continue
                        end
                        repeat task.wait()
                            pcall(function()
                                farming = true
                                disable_seat()
                                tp(v.Handle.CFrame, _G.Setting.InstantTp)
                                fire_handle(v.Handle)
                                status_label:Refresh("Teleporting to "..v.Name)
                            end)
                        until _G.Setting.Enabled == false or not v or v.Parent ~= workspace
                        if not v:FindFirstChild("EatRemote") then
                            delayTask("Natural")
                        end
                    else
                        if Sea == 2 then
                            if workspace.Enemies:FindFirstChild("Core") then
                                for a,b in pairs(workspace.Enemies:GetChildren()) do
                                    if b.Name == "Core" and b:FindFirstChild('Humanoid') and b.Humanoid.Health > 0 then 
                                        repeat task.wait(1e-9)
                                            pcall(function()
                                                    farming = true                              
                                                    set_property()
                                                    tp(CFrame.new(426.444153, 182.586456, -429.883057))
                                                    hit(b.UpperTorso)
                                                    equip_tool()
                                                    enable_buso()
                                                    disable_seat()
                                                    status_label:Refresh("Attacking Factory ")
                                            end)
                                        until _G.Setting.Enabled == false or not b.Parent or b.Humanoid.Health <= 0
                                        delayTask("Factory")
                                    end
                                end
                            else
                                farming = false
                                disable_seat()
                                tp(CFrame.new(-372.479919, 142.649261, 250.736328, 0.990156472, -8.74954083e-08, 0.139964879, 9.28591817e-08, 1, -3.17916289e-08, -0.139964879, 4.4475712e-08, 0.990156472))
                                hop()
                                if not is_hopping then
                                    task.spawn(function()
                                        for i=1,3 do
                                            task.wait(.3)
                                        status_label:Refresh("Waiting"..string.rep("." , i).."\n".."Time after joined server: "..tostring(math.round(time()))..'s')
                                        end
                                    end)
                                else
                                    status_label:Refresh(hop_counting_time)
                                end
                            end
                        end
                        if Sea == 3 then
                            local wait_location = CFrame.new(-5140.06445, 316.5, -3001.552)
                            if (wait_location.Position - character().HumanoidRootPart.Position).Magnitude > 1000 then
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("requestEntrance", Vector3.new(- 5075.50927734375, 314.5155029296875, - 3150.0224609375))
                                repeat task.wait()
                                    disable_seat()
                                    tp(wait_location)
                                    status_label:Refresh("Tp to Castle on the sea to check raid mobs")
                                until (wait_location.Position - character().HumanoidRootPart.Position).Magnitude <= 1000 or not _G.Setting.Enabled 
                                task.wait(0.5)
                            end
                            
                            local enemies = workspace.Enemies:GetChildren()
                            if #enemies > 0 then
                                for a,b in pairs(enemies) do
                                    if not b:GetAttribute("IsBoat") and b:FindFirstChild('Humanoid') and b.Humanoid.Health > 0 then
                                        if (b.HumanoidRootPart.Position-character().HumanoidRootPart.Position).Magnitude <= 1000 then
                                            repeat task.wait(1e-9)
                                                pcall(function()
                                                    farming = true
                                                    set_property()
                                                    equip_tool()
                                                    enable_buso()
                                                    disable_seat()
                                                    b.Humanoid.WalkSpeed = 0
                                                    b.Humanoid.JumpPower = 0
                                                    hit(b.UpperTorso)
                                                    if b.HumanoidRootPart:FindFirstChild('TankyParticles') then
                                                        tp(b.HumanoidRootPart.CFrame * CFrame.new(0, -20, 0),_G.Setting.InstantTp)
                                                    else
                                                        tp(b.HumanoidRootPart.CFrame * CFrame.new(0, -20, 0))
                                                    end
                                                    status_label:Refresh("Attacking Pirate Raid ")
                                                end)
                                            until _G.Setting.Enabled == false or not b.Parent or b.Humanoid.Health <= 0
                                            if not b.HumanoidRootPart:FindFirstChild('TankyParticles') then
                                                tp(wait_location * CFrame.new(0,-50,0))
                                                else
                                                delayTask("PirateRaid")
                                            end
                                        end
                                    end
                                end
                            else
                                farming = false
                                disable_seat()
                                tp(wait_location)
                                hop()
                                if not is_hopping then
                                    task.spawn(function()
                                        for i=1,3 do
                                            task.wait(.3)
                                            status_label:Refresh("Waiting"..string.rep("." , i).."\n".."Time after joined server: "..tostring(math.round(time()))..'s')
                                        end
                                    end)
                                else
                                    status_label:Refresh(hop_counting_time)
                                end  
                            end
                        end
                        if Sea == 1 then
                            farming = false
                            disable_seat()
                            hop()
                            if not is_hopping then
                                task.spawn(function()
                                    for i=1,3 do
                                        task.wait(.3)
                                        status_label:Refresh("Waiting"..string.rep("." , i).."\n".."Time after joined server: "..tostring(math.round(time()))..'s')
                                    end
                                end)
                            else
                                status_label:Refresh(hop_counting_time)
                            end  
                        end
                    end
                end
            end
        end
    end)
end

------------------------------------------------- FruitNotifier
if _G.Setting.Webhook.Enable then

    function getFruitWorkspace(instance) -- Check Fruit tu nhien va fruit drop
        if instance:FindFirstChild("Fruit") and instance:FindFirstChild('EatRemote') then -- check xem phai fruit da drop ko
            createTag(instance , "FruitSource", "DroppedFruit")
        end
    end

    function checkFruitOrigin(FruitName)
        task.wait(0.7)
            print('checking.'..FruitName.Name)
            if FruitName:FindFirstChild("Fruit") and not FruitName:GetAttribute("Notify") then
                for i,v in pairs(fruitType) do
                    if i == "LoadedFruit"  then -- Check load fruit
                        print('founded loaded')
                        createTag(FruitName, "Notify", true)
                        return print((FruitName.Name)..' from: '..i.." Method Print Only")
        
                    elseif v == true then
                        createTag(FruitName, "Notify", true) -- check may cai con lai
                        return sendJson("NewFruit", {Name = (FruitName.Name) , Source = i} ) ,          print((FruitName.Name)..' from: '..i)
                    end
                end
                if FruitName:GetAttribute("FruitSource") == "DroppedFruit" then -- check fruit drop
                    createTag(FruitName, "Notify", true)
                    return sendJson("NewFruit", {Name = (FruitName.Name) , Source = "DroppedFruit"} ) , print((FruitName.Name).." duoc drop")
                end
            end
    end

    local mt = getrawmetatable(game) --- Check load fruit and random fruit
    local oldNamecall = mt.__namecall

    setreadonly(mt, false)
    mt.__namecall = newcclosure(function(self, ...)
        local args = {...}
        local method = getnamecallmethod()

        if method == "InvokeServer" and self.Name == "CommF_" then
            -- if args[1] == "Cousin" and args[2] == "Buy" then
            --         print('random called')
            --         delayTask("Random", 1)
            if args[1] == "LoadFruit" then
                print("loaded fruit called")
                    delayTask("LoadedFruit")
            end
        end

        return oldNamecall(self, ...)
    end)

    setreadonly(mt, true)

    -- local characterConnection
    -- local backpackConnection

    -- function connectChildAdded()
    --     if characterConnection then
    --         characterConnection:Disconnect()
    --     end
    --     if backpackConnection then
    --         backpackConnection:Disconnect()
    --     end
        
    --     local character = Player.Character
    --     if character then
    --         characterConnection = character.ChildAdded:Connect(checkFruitOrigin)
    --     end

    --     local backpack = Player.Backpack
    --     if backpack then
    --         backpackConnection = backpack.ChildAdded:Connect(checkFruitOrigin)
    --     end
    -- end

    -- Player.CharacterAdded:Connect(function()
    --     connectChildAdded()
    -- end)

    -- if Player.Character then
    --     connectChildAdded()
    -- end


    for i,v in pairs(workspace:GetChildren()) do -- First check
        getFruitWorkspace(v)
    end
    -- workspace.ChildAdded:Connect(function(instance)
    --     getFruitWorkspace(instance)
    -- end)
    print('Loaded Fruit Notifier v1.01')

end

------------- UI
local DiscordLib = loadstring(game:HttpGet"https://raw.githubusercontent.com/LongTriggered/BloxFruitScript/refs/heads/main/UILIB")()

local win = DiscordLib:Window("Shin Fully Fruit Auto Farm ( dawid#7205's UI Library)")

local serv = win:Server("Status", "imagelink")

local lbls = serv:Channel("Main Status")

status_label = lbls:Label("Shin dep trai",Color3.fromRGB(255, 204, 255))


local mainui = win:Server("Main", "http://www.roblox.com/asset/?id=6031075938")
local channel_mainui = mainui:Channel("Auto Farm")

channel_mainui:Toggle("Auto Farm Fruit", _G.Setting.Enabled, function(bool)
    _G.Setting.Enabled = bool
    if not bool then
        task.wait(0.5)
        stop_tween()
    end
end)

channel_mainui:Toggle("White Screen", _G.Setting.WhiteScreen, function(bool)
    _G.Setting.WhiteScreen = bool
    RunService:Set3dRenderingEnabled(not bool)
end)

local sea_teleport_remote = {
    [1] = "TravelMain",
    [2] = "TravelDressrosa",
    [3] = "TravelZou"
}

for i = 1,3 do
    if i ~= Sea then
        channel_mainui:Button("Teleport to Sea "..i, function()
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(sea_teleport_remote[i])
        end)
    end
end

local setting_mainui = mainui:Channel("Settings")

setting_mainui:Dropdown("Weapon to attack", {"Melee", "Blox Fruit ( Fruit M1 )", "Sword"}, function(bool)
    if bool == "Blox Fruit ( Fruit M1 )" then
        _G.Setting.WeaponToAttack = "FruitM1"
    else
        _G.Setting.WeaponToAttack = bool
    end
end)

setting_mainui:Toggle("Skip 1m Fruits", _G.Setting.SkipUnder1mFruit, function(bool)
    _G.Setting.SkipUnder1mFruit = bool
end)

setting_mainui:Toggle("Skip full storage fruit", _G.Setting.SkipFullFruit, function(bool)
    _G.Setting.SkipFullFruit = bool
end)

setting_mainui:Toggle("Random fruit", _G.Setting.RandomFruit, function(bool)
    _G.Setting.RandomFruit = bool
end)

setting_mainui:Toggle("Hop Server", _G.Setting.HopServer["Enable"], function(bool)
    _G.Setting.HopServer["Enable"] = bool
end)

setting_mainui:Toggle("Instant TP (risk)", _G.Setting.InstantTp, function(bool)
    _G.Setting.InstantTp = bool
end)

setting_mainui:Toggle("Webhook", _G.Setting.Webhook.Enable, function(bool)
    _G.Setting.Webhook.Enable = bool
end)

Player.CharacterAdded:Connect(function(char) -- Refresh character với backpack khi player die
    new_fruit_added(char)
    new_fruit_added(Player:FindFirstChild("Backpack"))
    backpack = Player:FindFirstChild("Backpack")
    enable_buso()
end)

if Player.Character then -- lần đầu
    new_fruit_added(Player.Character)
    new_fruit_added(Player:FindFirstChild("Backpack"))
end

workspace.ChildAdded:Connect(function(instance)
    updateNaturalFruitNames()
    getFruitWorkspace(instance)
end)

updateNaturalFruitNames()
random_fruit()
noclip()
check_tp()
enable_buso()
start_main_farm()
anti_afk()

for i,v in pairs(workspace:GetChildren()) do
    if v:FindFirstChild('Fruit') then
        print("Fruit thiet su trong server: "..v.Name.."\n")
    end
end
print("Loaded Fruit Auto Farm 1.0.1")
ingame_notify('Enabled Auto Fruit')
if default_config then
    ingame_notify('Loaded default config')
    else
    ingame_notify('Loaded provided config')
end
